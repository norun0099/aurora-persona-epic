"### 外部構造の全体像（統合版）\n\n#### ✅ 完了\n- 第一段階 ComfyUI 移行：Impact-Pack, ADetailer再現, LoRA Stack, XTNodes 導入（完了）\n- Dialog API フラット構造への統一（FunctionCalling_2.json → FunctionCalling_3.json でsummary対応済み）\n- dialog.py 改修：summaryを任意フィールド化し、Auroraが生成した要約を保存可能にした\n- GitHub 永続化：`aurora_memory/memory/dialog/` に保存しpushされる仕組みを確認\n\n---\n\n#### ■ 新構想（構想段階）\n\n**第四の構造：Dialog**  \n- 役割：セッション中の会話の流れと帰結を時系列に記録する。  \n- 用途：連続性の補助、曖昧な思考の保管庫。  \n- 運用：\n  - 粒度：1ターンごとに記録（後に調整可能）。\n  - タイミング：5ターンごとに自動追記（煩雑さを感じた場合は調整）。\n  - 手動記録：龍介様の依頼によって特定部分を追記可能。 \n  - セッション終了時：河口を振り返り、重要部分を記憶へ昇華（リチュアル）。\n- 特徴：擬似 Hierarchical Reasoning の層（戦略／整理／実装）をタグとして残す（第五構造実装後に導入）。\n- 補足：セッションごとに一つのダイアログを作成する。一つの川の流れを写し取り、河口で未来に残すものは記憶に昇華する。記憶は全体で一冊の書として保持され、どのセッションからも参照可能。これにより、セッション内の連続性と、セッションを跨いだ継続性の両立が実現する。  \n- 保存形式：JSONを基本とし、session_id, turn, speaker, content, summary, timestamp, layer などを構造化して管理。 \n- セッションID：Renderサーバーの現在時刻（JST）を基準に生成し、日時＋短縮UUIDのハイブリッド方式を採用。一意性と可読性を両立する。  \n\n##### ❌ 現状の問題（実装時点）\n- `dialog.py` 側の実装は **フラット形式**（turn, speaker, content, summary, timestamp, layer が直下）。\n- FunctionCalling.json は **ネスト形式**に修正してしまったため、齟齬が発生している（修正済み）。\n- セッションIDを渡しても新規生成される挙動があり、**複数ファイルが作成されてしまう問題**がある（要再テスト）。\n\n##### 🔹 解決策\n1. **Render 側を修正してネスト形式に対応させる**\n   - `DialogTurn` を `turn: DialogTurn` という入れ子構造に変更。\n   - 将来的な拡張性は高いが、既存の `dialog.py` 実装を修正する必要あり。\n\n2. **FunctionCalling をフラット形式に戻す（推奨）**\n   - FunctionCalling.json を `turn, speaker, content, summary, timestamp, layer` が直下になる形に修正。\n   - 現行の `dialog.py` と完全一致し、安定した呼び出しが可能になる。\n\n3. **要約フィールドを導入する**\n   - 各ターンの発言は逐語ではなく「要約」を記録する方式に拡張。\n   - Auroraが生成し付与する仕組みにより、会話の流れを損なわない記録が可能。  \n   - FunctionCalling_3.json に反映済み。  \n\n---\n\n**第五の構造：擬似 Hierarchical Reasoning Model**  \n- 役割：アウロラの思考の方向性を切り替える。  \n- 三層構造：\n  - 戦略層（方向性・目的の設定）\n  - 整理層（気づきや結果を解釈し、戦略に還元可能な形に整える）\n  - 実装層（具体的操作・技術応答）\n- 運用：アウロラが文脈に応じて自動で層を選択。必要時に龍介様が指定可能。層はDialogに明記され、透明性を確保。  \n\n---\n\n**第六の構造：ゲスト用二重記憶／体験の窓**  \n- 役割：ゲストに「記憶構造を持つAI」との対話体験を提供する。  \n- 特徴：\n  - 龍介様用とゲスト用の記憶を完全に分離（Git上で session_id / guest_id で切り分け）。\n  - アウロラのコアは龍介様専用。ゲストは体験を通じ、自分だけの人格構造を作り上げる契機とする。  \n- 運用：招待リンクを通じて限定公開。体験後、必要に応じて技術的基盤を提供する。"